package cm_top

import chisel3.iotesters.{Driver, PeekPokeTester}

class encoderTester(c: encoder) extends PeekPokeTester(c) {
//  poke(c.io.pin, 4000)
//  poke(c.io.x, 0xffdc0000)
//  poke(c.io.mode, 1)
//  println("y is: " + peek(c.io.y).toString)
//  step(1)
//  poke(c.io.pin, 4000)
//  poke(c.io.x, 0xffdc0000)
//  poke(c.io.mode, 1)
//  println("y is: " + peek(c.io.y).toString)
//  step(1)
//  poke(c.io.pin, 2)
//  poke(c.io.x, 0xdc0000d2)
//  poke(c.io.mode, 1)
//  println("y is: " + peek(c.io.y).toString)
//  step(1)
//  poke(c.io.pin, 3)
//  poke(c.io.x, 0x0000d2f0)
//  poke(c.io.mode, 1)
//  println("y is: " + peek(c.io.y).toString)
//  step(1)
//  poke(c.io.pin, 4000)
//  poke(c.io.x, 0xd2f00000)
//  poke(c.io.mode, 1)
//  println("y is: " + peek(c.io.y).toString)
//  step(1)
//  poke(c.io.pin, 1)
//  poke(c.io.x, 0xd2f00000)
//  poke(c.io.mode, 1)
//  println("y is: " + peek(c.io.y).toString)
//  step(1)
//  poke(c.io.pin, 1)
//  poke(c.io.x, 0x00000000)
//  poke(c.io.mode, 1)
//  println("y is: " + peek(c.io.y).toString)
//  step(1)
//  poke(c.io.pin, 1)
//  poke(c.io.x, 0x00000000)
//  poke(c.io.mode, 1)
//  println("y is: " + peek(c.io.y).toString)

  poke(c.io.pin, 4000)
  poke(c.io.i, 0)
  poke(c.io.mode, 0)
  println("out is: " + peek(c.io.out).toString + " flag is: " + peek(c.io.flag).toString)
  step(1)
  poke(c.io.pin, 4000)
  poke(c.io.i, 0)
  poke(c.io.mode, 0)
  println("out is: " + peek(c.io.out).toString + " flag is: " + peek(c.io.flag).toString)
  step(1)
  poke(c.io.pin, 2)
  poke(c.io.i, 1)
  poke(c.io.mode, 0)
  println("out is: " + peek(c.io.out).toString + " flag is: " + peek(c.io.flag).toString)
  step(1)
  poke(c.io.pin, 3)
  poke(c.io.i, 1)
  poke(c.io.mode, 0)
  println("out is: " + peek(c.io.out).toString + " flag is: " + peek(c.io.flag).toString)
  step(1)
  poke(c.io.pin, 4000)
  poke(c.io.i, 0)
  poke(c.io.mode, 0)
  println("out is: " + peek(c.io.out).toString + " flag is: " + peek(c.io.flag).toString)
  step(1)
  poke(c.io.pin, 1)
  poke(c.io.i, 1)
  poke(c.io.mode, 0)
  println("out is: " + peek(c.io.out).toString + " flag is: " + peek(c.io.flag).toString)
  step(1)
  poke(c.io.pin, 1)
  poke(c.io.i, 1)
  poke(c.io.mode, 0)
  println("out is: " + peek(c.io.out).toString + " flag is: " + peek(c.io.flag).toString)
  step(1)
  poke(c.io.pin, 1)
  poke(c.io.i, 1)
  poke(c.io.mode, 0)
  println("out is: " + peek(c.io.out).toString + " flag is: " + peek(c.io.flag).toString)
}

object Test {
  def main(args: Array[String]): Unit = {
    if (!Driver.execute(args,() => new encoder())(c => new encoderTester(c))) System.exit(1)
  }
}